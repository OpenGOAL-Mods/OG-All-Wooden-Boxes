#|

(execute-process-tree *active-pool* 
(lambda ((proc process)) (when (-> proc entity) 
(let ((vec (-> proc entity trans)) (quat (-> proc entity quat)) (name (the string (-> proc name)))) 
(format #t "~S trans: ~m ~m ~m~%" name (-> vec x) (-> vec y) (-> vec z)) (format #t "~S quat: ~f ~f ~f ~f~%" name (-> quat x) (-> quat y) (-> quat z) (-> quat w))))) *kernel-context*)

End notes
|#




(define *count-crates* 0)
(define *total-crates* 0)


(defun print-num-crate-level ()
(iterate-process-tree *active-pool* (lambda ((proc process)) 
(when (-> proc entity) 
(let (
    (vec (-> proc entity trans)) 
    (quat (-> proc entity quat)) 
    (name (the string (-> proc name))))
    (when (= (-> (the entity-actor (-> proc entity)) etype) crate)

    ;;We know its a crate

    ;;What defense does it have
    (format #t " defense: ~A~%" (-> (the crate (-> (-> proc entity) extra process)) defense))

    ;;If its wood, increase our count
    (if (= (-> (the crate (-> (-> proc entity) extra process)) defense) 'wood)
    (set! *count-crates* (+ *count-crates* 1))
    )
    ) 
    
    ))
    
    (format #t " trans: ~D~%"*count-crates*) 
    
    )
     *kernel-context*)
     (set! *count-crates* 0)
(none)
)



(defenum level-name-enum

  (training 0)
  (village1 1)
  (beach 2)
  (jungle 3)
  (misty 4)
  (firecanyon 5)
  (village2 6)
  (sunken 7)
  (swamp 8)
  (rolling 9)
  (ogre 10)
  (village3 11)
  (snow 12)
  (cave 13)
  (lavatube 14)
  (citadel 15)
  (max 16)
    )

(defun level-name-enum->string ((arg0 level-name-enum))
  (enum->string level-name-enum arg0)
  )

(defun fill-level-list-names  ()
(dotimes (i (* (- (level-name-enum max) 0) 1 ))
;;if we reach this point then it isnt already in wc-settings and we found a empty spot! lets fill it with what we have
(if #t
;;(=  (-> *wc-settings* wc-list level i name) 0.0)
(begin
(set! (-> *wc-settings* wc-list level i name) (level-name-enum->string  (the-as level-name-enum i)))
(case-str (-> *wc-settings* wc-list level i name)
(("training")
 (set! (-> *wc-settings* wc-list level i num-total-money) 24.0))

(("village1")
 (set! (-> *wc-settings* wc-list level i num-total-money) 0.0))

(("beach")
 (set! (-> *wc-settings* wc-list level i num-total-money) 52.0))

(("jungle")
 (set! (-> *wc-settings* wc-list level i num-total-money) 47.0))

(("misty")
 (set! (-> *wc-settings* wc-list level i num-total-money) 39.0))

(("firecanyon")
 (set! (-> *wc-settings* wc-list level i num-total-money) 2.0))

(("village2")
 (set! (-> *wc-settings* wc-list level i num-total-money) 28.0))

(("sunken")
 (set! (-> *wc-settings* wc-list level i num-total-money) 36.0))

(("swamp")
 (set! (-> *wc-settings* wc-list level i num-total-money) 71.0))

(("rolling")
 (set! (-> *wc-settings* wc-list level i num-total-money) 34.0))

(("ogre")
 (set! (-> *wc-settings* wc-list level i num-total-money) 16.0))

(("village3")
 (set! (-> *wc-settings* wc-list level i num-total-money) 0.0))

(("snow")
 (set! (-> *wc-settings* wc-list level i num-total-money) 57.0))

(("cave")
 (set! (-> *wc-settings* wc-list level i num-total-money) 75.0))

(("lavatube")
 (set! (-> *wc-settings* wc-list level i num-total-money) 0.0))

(("citadel")
 (set! (-> *wc-settings* wc-list level i num-total-money) 10.0))



)
)
)

)
(none)
)


(defun-extern activate-skill-point int string int)

(defun check-spoints ()
;; if the first level is null, then we havent populated the list yet.
(if (=  (-> *wc-settings* wc-list level 0 name) 0.0)
(begin
(fill-level-list-names))
(if (= *total-crates* 0)
(dotimes (i (* (- (level-name-enum max) 0) 1 ))
(+! *total-crates* (-> *wc-settings* wc-list level i num-total-money))
)
)
)


(dotimes (i (* (- (level-name-enum max) 0) 1 ))

;; (if (or (= (-> *wc-settings* wc-list level i status) 0) (= (-> *wc-settings* wc-list level i status) #f))
;; (begin
;;     (case-str (-> *wc-settings* wc-list level i name)
;;       (("get-10-orbs")
;;        (if  (>= (-> *game-info* money-total) 10.0)
;;        (begin
;;        (set! (-> *wc-settings* wc-list level i status) #t)
;;        (activate-skill-point 3 (-> *wc-settings* wc-list level i name))))
;;       )
;;       (("get-2-powercells")
;;        (if  (and (not (movie?)) (>= (-> *game-info* fuel) 2.0))
;;        (begin
;;        (set! (-> *wc-settings* wc-list level i status) #t)
;;        (activate-skill-point 3 (-> *wc-settings* wc-list level i name))))
;;       )

;;     ;;   (else
;;     ;;     (set! (-> *wc-settings* wc-list level i status) #f)
;;     ;;     )

;;       )))
      )
(none)
)

